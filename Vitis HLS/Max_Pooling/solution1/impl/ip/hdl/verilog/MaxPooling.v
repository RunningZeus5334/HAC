// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MaxPooling_MaxPooling,hls_ip_2024_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.978000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=5722,HLS_SYN_LUT=4398,HLS_VERSION=2024_1}" *)

module MaxPooling (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] image_r;
wire   [63:0] output_r;
wire   [31:0] width;
wire   [31:0] height;
wire   [31:0] channels;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state14;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state25;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state13;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state27;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state32;
reg  signed [31:0] channels_read_reg_634;
reg  signed [31:0] width_read_reg_640;
reg   [63:0] output_r_read_reg_647;
reg   [63:0] image_r_read_reg_652;
reg   [0:0] tmp_3_reg_657;
reg   [30:0] lshr_ln7_2_reg_662;
reg   [0:0] tmp_4_reg_667;
reg   [30:0] lshr_ln8_1_reg_672;
reg   [30:0] lshr_ln8_2_reg_677;
wire  signed [31:0] outputWidth_fu_348_p3;
reg  signed [31:0] outputWidth_reg_682;
wire    ap_CS_fsm_state2;
wire   [31:0] outputHeight_fu_367_p3;
reg   [31:0] outputHeight_reg_687;
wire  signed [63:0] sext_ln24_fu_374_p1;
reg  signed [63:0] sext_ln24_reg_692;
wire  signed [61:0] sext_ln24_1_fu_377_p1;
reg  signed [61:0] sext_ln24_1_reg_701;
wire  signed [63:0] sext_ln24_2_fu_381_p1;
reg  signed [63:0] sext_ln24_2_reg_706;
wire  signed [62:0] width_cast_fu_384_p1;
reg  signed [62:0] width_cast_reg_711;
wire   [62:0] add_ln24_1_fu_393_p2;
reg   [62:0] add_ln24_1_reg_719;
wire    ap_CS_fsm_state3;
wire   [30:0] add_ln24_fu_407_p2;
reg   [30:0] add_ln24_reg_727;
wire   [61:0] grp_fu_234_p2;
reg   [61:0] empty_reg_737;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_fu_418_p3;
reg   [63:0] tmp_reg_742;
wire   [63:0] empty_31_fu_425_p2;
reg   [63:0] empty_31_reg_748;
wire   [30:0] add_ln26_fu_439_p2;
reg   [30:0] add_ln26_reg_757;
wire    ap_CS_fsm_state6;
wire   [61:0] p_cast7_fu_461_p2;
reg   [61:0] p_cast7_reg_762;
wire  signed [63:0] empty_33_fu_466_p2;
reg  signed [63:0] empty_33_reg_767;
wire  signed [63:0] empty_35_fu_483_p2;
reg  signed [63:0] empty_35_reg_772;
wire  signed [63:0] empty_37_fu_488_p2;
reg  signed [63:0] empty_37_reg_777;
wire  signed [63:0] empty_39_fu_493_p2;
reg  signed [63:0] empty_39_reg_782;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_238_p2;
reg   [63:0] empty_32_reg_792;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_242_p2;
reg   [63:0] empty_34_reg_797;
wire   [63:0] grp_fu_246_p2;
reg   [63:0] empty_36_reg_802;
wire   [63:0] grp_fu_250_p2;
reg   [63:0] empty_38_reg_807;
wire   [63:0] grp_fu_254_p2;
reg   [63:0] empty_40_reg_812;
wire   [30:0] add_ln27_fu_519_p2;
reg   [30:0] add_ln27_reg_820;
wire    ap_CS_fsm_state12;
wire   [63:0] add_ln34_fu_529_p2;
reg   [63:0] add_ln34_reg_825;
reg   [63:0] gmem_addr_4_reg_833;
reg   [63:0] gmem_addr_reg_839;
reg   [63:0] gmem_addr_1_reg_845;
reg   [63:0] gmem_addr_2_reg_851;
reg   [63:0] gmem_addr_3_reg_857;
reg   [7:0] val_4_reg_863;
reg   [7:0] val_reg_869;
wire   [7:0] maxVal_1_fu_594_p3;
reg   [7:0] maxVal_1_reg_875;
reg   [7:0] val_5_reg_881;
wire   [7:0] maxVal_3_fu_604_p3;
reg   [7:0] maxVal_3_reg_887;
reg   [7:0] val_3_reg_893;
wire   [7:0] maxVal_4_fu_614_p3;
reg   [7:0] maxVal_4_reg_899;
wire    ap_CS_fsm_state26;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
wire   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire   [10:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg   [30:0] x_reg_212;
wire   [0:0] icmp_ln27_fu_514_p2;
reg   [30:0] ch_reg_223;
wire   [63:0] add_ln38_1_fu_539_p2;
wire   [63:0] add_ln34_1_fu_550_p2;
wire   [63:0] add_ln34_2_fu_560_p2;
wire   [63:0] add_ln34_3_fu_570_p2;
wire   [63:0] add_ln34_4_fu_580_p2;
reg   [62:0] phi_mul_fu_110;
wire   [0:0] icmp_ln26_fu_434_p2;
reg   [30:0] y_fu_114;
wire   [30:0] grp_fu_234_p0;
wire  signed [31:0] grp_fu_234_p1;
wire   [61:0] grp_fu_238_p0;
wire  signed [31:0] grp_fu_238_p1;
wire  signed [31:0] grp_fu_242_p1;
wire  signed [31:0] grp_fu_246_p1;
wire  signed [31:0] grp_fu_250_p1;
wire  signed [31:0] grp_fu_254_p1;
wire  signed [31:0] tmp_3_fu_258_p1;
wire  signed [31:0] lshr_ln7_2_fu_266_p1;
wire   [31:0] sub_ln8_fu_284_p2;
wire   [31:0] sub_ln7_fu_320_p2;
wire   [30:0] lshr_ln7_1_fu_325_p4;
wire   [31:0] zext_ln7_fu_335_p1;
wire   [31:0] sub_ln7_1_fu_339_p2;
wire   [31:0] zext_ln7_1_fu_345_p1;
wire   [31:0] zext_ln8_fu_355_p1;
wire   [31:0] sub_ln8_1_fu_358_p2;
wire   [31:0] zext_ln8_1_fu_364_p1;
wire   [31:0] zext_ln24_1_fu_398_p1;
wire   [31:0] zext_ln26_1_fu_430_p1;
wire   [31:0] tmp_1_fu_449_p3;
wire   [61:0] zext_ln26_fu_445_p1;
wire   [63:0] p_cast10_fu_457_p1;
wire   [31:0] tmp_2_fu_471_p3;
wire   [63:0] p_cast11_fu_479_p1;
wire   [31:0] zext_ln27_1_fu_510_p1;
wire   [63:0] zext_ln27_fu_525_p1;
wire   [63:0] add_ln38_fu_534_p2;
wire   [0:0] icmp_ln35_fu_590_p2;
wire   [0:0] icmp_ln35_1_fu_600_p2;
wire   [0:0] icmp_ln35_2_fu_610_p2;
wire   [0:0] icmp_ln24_fu_402_p2;
reg   [31:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
wire   [61:0] grp_fu_234_p00;
wire   [63:0] grp_fu_238_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 phi_mul_fu_110 = 63'd0;
#0 y_fu_114 = 31'd0;
end

MaxPooling_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .image_r(image_r),
    .output_r(output_r),
    .width(width),
    .height(height),
    .channels(channels),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

MaxPooling_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 11 ),
    .CH0_USER_DW( 8 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem_ARVALID),
    .I_CH0_ARREADY(gmem_ARREADY),
    .I_CH0_ARADDR(gmem_ARADDR),
    .I_CH0_ARLEN(gmem_ARLEN),
    .I_CH0_RVALID(gmem_RVALID),
    .I_CH0_RREADY(gmem_RREADY),
    .I_CH0_RDATA(gmem_RDATA),
    .I_CH0_RFIFONUM(gmem_RFIFONUM),
    .I_CH0_AWVALID(gmem_AWVALID),
    .I_CH0_AWREADY(gmem_AWREADY),
    .I_CH0_AWADDR(gmem_addr_4_reg_833),
    .I_CH0_AWLEN(gmem_AWLEN),
    .I_CH0_WVALID(gmem_WVALID),
    .I_CH0_WREADY(gmem_WREADY),
    .I_CH0_WDATA(maxVal_4_reg_899),
    .I_CH0_WSTRB(1'd1),
    .I_CH0_BVALID(gmem_BVALID),
    .I_CH0_BREADY(gmem_BREADY)
);

MaxPooling_mul_31ns_32s_62_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_31ns_32s_62_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_234_p0),
    .din1(grp_fu_234_p1),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

MaxPooling_mul_62ns_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 62 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_62ns_32s_64_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_238_p0),
    .din1(grp_fu_238_p1),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

MaxPooling_mul_64s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_64s_32s_64_5_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_33_reg_767),
    .din1(grp_fu_242_p1),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

MaxPooling_mul_64s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_64s_32s_64_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_35_reg_772),
    .din1(grp_fu_246_p1),
    .ce(1'b1),
    .dout(grp_fu_246_p2)
);

MaxPooling_mul_64s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_64s_32s_64_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_37_reg_777),
    .din1(grp_fu_250_p1),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

MaxPooling_mul_64s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_64s_32s_64_5_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_39_reg_782),
    .din1(grp_fu_254_p1),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        ch_reg_223 <= add_ln27_reg_820;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ch_reg_223 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_fu_110 <= 63'd0;
    end else if (((icmp_ln26_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_fu_110 <= add_ln24_1_reg_719;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        x_reg_212 <= add_ln26_reg_757;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_reg_212 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_114 <= 31'd0;
    end else if (((icmp_ln26_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        y_fu_114 <= add_ln24_reg_727;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln24_1_reg_719 <= add_ln24_1_fu_393_p2;
        add_ln24_reg_727 <= add_ln24_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln26_reg_757 <= add_ln26_fu_439_p2;
        empty_33_reg_767[63 : 1] <= empty_33_fu_466_p2[63 : 1];
        empty_35_reg_772[63 : 1] <= empty_35_fu_483_p2[63 : 1];
        empty_37_reg_777 <= empty_37_fu_488_p2;
        empty_39_reg_782 <= empty_39_fu_493_p2;
        p_cast7_reg_762 <= p_cast7_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln27_reg_820 <= add_ln27_fu_519_p2;
        add_ln34_reg_825 <= add_ln34_fu_529_p2;
        gmem_addr_4_reg_833 <= add_ln38_1_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        channels_read_reg_634 <= channels;
        image_r_read_reg_652 <= image_r;
        lshr_ln7_2_reg_662 <= {{lshr_ln7_2_fu_266_p1[31:1]}};
        lshr_ln8_1_reg_672 <= {{sub_ln8_fu_284_p2[31:1]}};
        lshr_ln8_2_reg_677 <= {{height[31:1]}};
        output_r_read_reg_647 <= output_r;
        tmp_3_reg_657 <= tmp_3_fu_258_p1[32'd31];
        tmp_4_reg_667 <= height[32'd31];
        width_read_reg_640 <= width;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_31_reg_748 <= empty_31_fu_425_p2;
        empty_reg_737 <= grp_fu_234_p2;
        tmp_reg_742[63 : 1] <= tmp_fu_418_p3[63 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        empty_32_reg_792 <= grp_fu_238_p2;
        empty_34_reg_797 <= grp_fu_242_p2;
        empty_36_reg_802 <= grp_fu_246_p2;
        empty_38_reg_807 <= grp_fu_250_p2;
        empty_40_reg_812 <= grp_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_addr_1_reg_845 <= add_ln34_2_fu_560_p2;
        gmem_addr_2_reg_851 <= add_ln34_3_fu_570_p2;
        gmem_addr_3_reg_857 <= add_ln34_4_fu_580_p2;
        gmem_addr_reg_839 <= add_ln34_1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        maxVal_1_reg_875 <= maxVal_1_fu_594_p3;
        val_5_reg_881 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        maxVal_3_reg_887 <= maxVal_3_fu_604_p3;
        val_3_reg_893 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        maxVal_4_reg_899 <= maxVal_4_fu_614_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        outputHeight_reg_687 <= outputHeight_fu_367_p3;
        outputWidth_reg_682 <= outputWidth_fu_348_p3;
        sext_ln24_1_reg_701 <= sext_ln24_1_fu_377_p1;
        sext_ln24_2_reg_706 <= sext_ln24_2_fu_381_p1;
        sext_ln24_reg_692 <= sext_ln24_fu_374_p1;
        width_cast_reg_711 <= width_cast_fu_384_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        val_4_reg_863 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        val_reg_869 <= gmem_RDATA;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

assign ap_ST_fsm_state26_blk = 1'b0;

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln24_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            gmem_ARADDR = gmem_addr_3_reg_857;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            gmem_ARADDR = gmem_addr_2_reg_851;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            gmem_ARADDR = gmem_addr_1_reg_845;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            gmem_ARADDR = gmem_addr_reg_839;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln24_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln26_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln27_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_1_fu_393_p2 = ($signed(phi_mul_fu_110) + $signed(width_cast_reg_711));

assign add_ln24_fu_407_p2 = (y_fu_114 + 31'd1);

assign add_ln26_fu_439_p2 = (x_reg_212 + 31'd1);

assign add_ln27_fu_519_p2 = (ch_reg_223 + 31'd1);

assign add_ln34_1_fu_550_p2 = (add_ln34_reg_825 + empty_34_reg_797);

assign add_ln34_2_fu_560_p2 = (add_ln34_reg_825 + empty_36_reg_802);

assign add_ln34_3_fu_570_p2 = (add_ln34_reg_825 + empty_38_reg_807);

assign add_ln34_4_fu_580_p2 = (add_ln34_reg_825 + empty_40_reg_812);

assign add_ln34_fu_529_p2 = (zext_ln27_fu_525_p1 + image_r_read_reg_652);

assign add_ln38_1_fu_539_p2 = (add_ln38_fu_534_p2 + empty_32_reg_792);

assign add_ln38_fu_534_p2 = (zext_ln27_fu_525_p1 + output_r_read_reg_647);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_31_fu_425_p2 = ($signed(tmp_fu_418_p3) + $signed(sext_ln24_2_reg_706));

assign empty_33_fu_466_p2 = (p_cast10_fu_457_p1 + tmp_reg_742);

assign empty_35_fu_483_p2 = (p_cast11_fu_479_p1 + tmp_reg_742);

assign empty_37_fu_488_p2 = (p_cast10_fu_457_p1 + empty_31_reg_748);

assign empty_39_fu_493_p2 = (p_cast11_fu_479_p1 + empty_31_reg_748);

assign gmem_ARLEN = 64'd1;

assign gmem_AWLEN = 64'd1;

assign grp_fu_234_p0 = grp_fu_234_p00;

assign grp_fu_234_p00 = y_fu_114;

assign grp_fu_234_p1 = sext_ln24_1_reg_701;

assign grp_fu_238_p0 = grp_fu_238_p00;

assign grp_fu_238_p00 = p_cast7_reg_762;

assign grp_fu_238_p1 = sext_ln24_reg_692;

assign grp_fu_242_p1 = sext_ln24_reg_692;

assign grp_fu_246_p1 = sext_ln24_reg_692;

assign grp_fu_250_p1 = sext_ln24_reg_692;

assign grp_fu_254_p1 = sext_ln24_reg_692;

assign icmp_ln24_fu_402_p2 = (($signed(zext_ln24_1_fu_398_p1) < $signed(outputHeight_reg_687)) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_434_p2 = (($signed(zext_ln26_1_fu_430_p1) < $signed(outputWidth_reg_682)) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_514_p2 = (($signed(zext_ln27_1_fu_510_p1) < $signed(channels_read_reg_634)) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_600_p2 = ((val_5_reg_881 > maxVal_1_reg_875) ? 1'b1 : 1'b0);

assign icmp_ln35_2_fu_610_p2 = ((val_3_reg_893 > maxVal_3_reg_887) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_590_p2 = ((val_reg_869 > val_4_reg_863) ? 1'b1 : 1'b0);

assign lshr_ln7_1_fu_325_p4 = {{sub_ln7_fu_320_p2[31:1]}};

assign lshr_ln7_2_fu_266_p1 = width;

assign maxVal_1_fu_594_p3 = ((icmp_ln35_fu_590_p2[0:0] == 1'b1) ? val_reg_869 : val_4_reg_863);

assign maxVal_3_fu_604_p3 = ((icmp_ln35_1_fu_600_p2[0:0] == 1'b1) ? val_5_reg_881 : maxVal_1_reg_875);

assign maxVal_4_fu_614_p3 = ((icmp_ln35_2_fu_610_p2[0:0] == 1'b1) ? val_3_reg_893 : maxVal_3_reg_887);

assign outputHeight_fu_367_p3 = ((tmp_4_reg_667[0:0] == 1'b1) ? sub_ln8_1_fu_358_p2 : zext_ln8_1_fu_364_p1);

assign outputWidth_fu_348_p3 = ((tmp_3_reg_657[0:0] == 1'b1) ? sub_ln7_1_fu_339_p2 : zext_ln7_1_fu_345_p1);

assign p_cast10_fu_457_p1 = tmp_1_fu_449_p3;

assign p_cast11_fu_479_p1 = tmp_2_fu_471_p3;

assign p_cast7_fu_461_p2 = (zext_ln26_fu_445_p1 + empty_reg_737);

assign sext_ln24_1_fu_377_p1 = outputWidth_fu_348_p3;

assign sext_ln24_2_fu_381_p1 = width_read_reg_640;

assign sext_ln24_fu_374_p1 = channels_read_reg_634;

assign sub_ln7_1_fu_339_p2 = (32'd0 - zext_ln7_fu_335_p1);

assign sub_ln7_fu_320_p2 = ($signed(32'd0) - $signed(width_read_reg_640));

assign sub_ln8_1_fu_358_p2 = (32'd0 - zext_ln8_fu_355_p1);

assign sub_ln8_fu_284_p2 = (32'd0 - height);

assign tmp_1_fu_449_p3 = {{x_reg_212}, {1'd0}};

assign tmp_2_fu_471_p3 = {{x_reg_212}, {1'd1}};

assign tmp_3_fu_258_p1 = width;

assign tmp_fu_418_p3 = {{phi_mul_fu_110}, {1'd0}};

assign width_cast_fu_384_p1 = width_read_reg_640;

assign zext_ln24_1_fu_398_p1 = y_fu_114;

assign zext_ln26_1_fu_430_p1 = x_reg_212;

assign zext_ln26_fu_445_p1 = x_reg_212;

assign zext_ln27_1_fu_510_p1 = ch_reg_223;

assign zext_ln27_fu_525_p1 = ch_reg_223;

assign zext_ln7_1_fu_345_p1 = lshr_ln7_2_reg_662;

assign zext_ln7_fu_335_p1 = lshr_ln7_1_fu_325_p4;

assign zext_ln8_1_fu_364_p1 = lshr_ln8_2_reg_677;

assign zext_ln8_fu_355_p1 = lshr_ln8_1_reg_672;

always @ (posedge ap_clk) begin
    tmp_reg_742[0] <= 1'b0;
    empty_33_reg_767[0] <= 1'b0;
    empty_35_reg_772[0] <= 1'b1;
end

endmodule //MaxPooling
